#!/bin/bash
# offline-setup.sh - Load pipeline assets and Docker images for offline execution (MVP demo)
set -euo pipefail

# Simple config
ASSETS_DIR="./offline-assets"
PIPELINE_DIR="${ASSETS_DIR}/pipeline"
IMAGES_FILE="${ASSETS_DIR}/images.txt"
LOG_FILE="/tmp/offline-setup.log"
ENV_FILE=".env"
SOURCE_REGISTRY="docker.io/mytestlab123"

# Simple logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "${LOG_FILE}"
}

# Simple error handler
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Transform image name (quay.io/biocontainers/fastqc:tag -> docker.io/mytestlab123/fastqc:tag)
transform_image_name() {
    local source_image="$1"
    local name_tag=$(echo "$source_image" | sed 's/.*\/\([^\/]*\)$/\1/')
    echo "${SOURCE_REGISTRY}/${name_tag}"
}

# Main function
main() {
    log "Starting offline setup for Nextflow pipeline execution"
    
    # Check tools
    log "Checking required tools..."
    command -v docker &>/dev/null || error_exit "docker not found"
    command -v nextflow &>/dev/null || error_exit "nextflow not found"
    docker info &>/dev/null || error_exit "Docker daemon not running"
    log "Required tools available"
    
    # Load credentials (optional)
    log "Loading authentication credentials from .env file..."
    if [[ -f "${ENV_FILE}" ]]; then
        set -a
        source "${ENV_FILE}"
        set +a
        [[ -n "${DOCKER_USER:-}" ]] && log "Credentials loaded successfully for user: ${DOCKER_USER}"
    else
        log "Warning: .env file not found. Using Docker Hub without explicit credentials."
    fi
    
    # Validate assets
    log "Validating offline assets..."
    [[ ! -d "${ASSETS_DIR}" ]] && error_exit "Assets directory not found: ${ASSETS_DIR}. Run online-prepare.sh first."
    [[ ! -d "${PIPELINE_DIR}" ]] && error_exit "Pipeline directory not found: ${PIPELINE_DIR}. Run online-prepare.sh first."
    [[ ! -f "${IMAGES_FILE}" ]] && error_exit "Images file not found: ${IMAGES_FILE}. Run generate-image-list.sh first."
    [[ ! -f "${PIPELINE_DIR}/main.nf" ]] && error_exit "Pipeline main.nf not found in ${PIPELINE_DIR}"
    log "Assets validation completed successfully"
    
    # Load Docker images
    log "Loading Docker images from Docker Hub..."
    local total_images=$(wc -l < "${IMAGES_FILE}")
    log "Found ${total_images} images to load"
    
    local pulled_count=0 failed_count=0
    
    while IFS= read -r image || [[ -n "$image" ]]; do
        [[ -z "$image" || "$image" =~ ^#.*$ ]] && continue
        
        local dest_image=$(transform_image_name "$image")
        log "Pulling Docker image: ${dest_image}"
        
        if docker pull "$dest_image" &>>"${LOG_FILE}"; then
            log "✓ Successfully pulled: ${dest_image}"
            ((pulled_count++))
        else
            log "✗ Failed to pull: ${dest_image}"
            ((failed_count++))
        fi
    done < "${IMAGES_FILE}"
    
    log "Image loading completed: ${pulled_count} pulled, ${failed_count} failed"
    [[ $failed_count -gt 0 ]] && error_exit "Failed to pull ${failed_count} images"
    
    # Validate loaded images
    log "Validating loaded Docker images..."
    local validation_failed=0
    
    while IFS= read -r image || [[ -n "$image" ]]; do
        [[ -z "$image" || "$image" =~ ^#.*$ ]] && continue
        
        local dest_image=$(transform_image_name "$image")
        
        if docker image inspect "$dest_image" &>/dev/null; then
            log "✓ Image available locally: ${dest_image}"
        else
            log "✗ Image not found locally: ${dest_image}"
            ((validation_failed++))
        fi
    done < "${IMAGES_FILE}"
    
    [[ $validation_failed -gt 0 ]] && error_exit "Validation failed: ${validation_failed} images not available locally"
    log "All Docker images validated successfully"
    
    # Create offline config
    log "Creating Nextflow configuration for offline execution..."
    cat > "./nextflow-offline.config" << 'EOF'
// Nextflow configuration for offline execution
// Generated by offline-setup.sh

// Disable automatic updates and remote repository access
nextflow.enable.configProcessNamesValidation = false

// Docker configuration for offline execution
docker {
    enabled = true
    registry = 'docker.io/mytestlab123'
    fixOwnership = true
    runOptions = '-u $(id -u):$(id -g)'
}
EOF
    log "Offline configuration created: ./nextflow-offline.config"
    
    # Simple status report
    log "Generating offline environment status report..."
    cat > "${ASSETS_DIR}/offline-status-report.txt" << EOF
=== Nextflow Offline Environment Status Report ===
Generated: $(date)
Host: $(hostname)

=== Pipeline Assets ===
Pipeline Directory: ${PIPELINE_DIR}
Main Workflow: ${PIPELINE_DIR}/main.nf
Configuration: ${PIPELINE_DIR}/nextflow.config
Offline Config: ./nextflow-offline.config

=== Docker Images Status ===
$(while IFS= read -r img; do 
    [[ -z "$img" || "$img" =~ ^#.*$ ]] && continue
    dest=$(transform_image_name "$img")
    if docker image inspect "$dest" &>/dev/null; then
        echo "  ✓ $dest"
    else
        echo "  ✗ $dest (MISSING)"
    fi
done < "${IMAGES_FILE}")

=== Next Steps ===
Status: READY FOR OFFLINE EXECUTION
Ready for offline pipeline execution!
EOF
    log "Status report generated: ${ASSETS_DIR}/offline-status-report.txt"
    
    log "Offline setup completed successfully!"
    log "Next step: Run './run-offline-pipeline.sh' to execute the pipeline"
    
    echo ""
    echo "✓ Offline setup completed successfully!"
    echo "✓ Pipeline assets: Available"
    echo "✓ Docker images: Loaded and validated"
    echo "✓ Offline config: Created"
    echo "✓ Ready for offline pipeline execution!"
}

main "$@"